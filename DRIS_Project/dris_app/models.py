# Name: Amir Ali Malekani Nezhad
# Student ID: S2009460

from django.contrib.auth.models import AbstractUser, Group  # type: ignore
from django.db import models  # type: ignore


class User(AbstractUser):
    """ `dris_app.models.User` is a custom user model that extends Django's AbstractUser.
    It includes additional fields to differentiate between different user roles in the
    disaster response system.

    Parameters
    ----------
    `username` : str
        The username for the user, which is unique and used for login.
    `password` : str
        The hashed password for the user.
    `email` : str
        The email address of the user, which is unique.
    `first_name` : str
        The first name of the user.
    `last_name` : str
        The last name of the user.
    `phone_number` : str
        The phone number of the user, which can be used for contact purposes.
    `role` : str
        The role of the user, which can be 'Citizen', 'Volunteer', or 'Authority'.
        This field is used to differentiate the functionalities available to each user type.

    Attributes
    ----------
    `id` : int
        The unique identifier for the user, automatically generated by Django. This
        is used as the primary key for the class.
    `username` : str
        The username for the user, which is unique and used for login.
    `email` : str
        The email address of the user, which is unique.
    `password` : str
        The hashed password for the user, stored securely.
    `first_name` : str
        The first name of the user.
    `last_name` : str
        The last name of the user.
    `phone_number` : str
        The phone number of the user, which can be used for contact purposes.
    `date_joined` : django.db.models.DateTimeField
        The timestamp when the user registered, automatically set to the current time
        when the user is created.
    `role` : str
        The role of the user, which can be 'Citizen', 'Volunteer', or 'Authority'.
    """
    ROLE_CHOICES = [
        ('Citizen', 'Citizen'),
        ('Volunteer', 'Volunteer'),
        ('Authority', 'Authority'),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES)
    phone_number = models.CharField(max_length=20)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        if self.role == 'Authority':
            self.is_staff = True

            authority_group, _ = Group.objects.get_or_create(name='Authority')
            self.groups.add(authority_group)

        else:
            self.groups.clear()

        super().save(*args, **kwargs)


class Skill(models.Model):
    """ `dris_app.models.Skill` is a model that represents a skill that a volunteer can have.
    It includes the name of the skill and a description.

    Parameters
    ----------
    `name` : str
        The name of the skill, such as 'First Aid', 'Rescue Operations', or 'Logistics'.
    `description` : str
        A brief description of the skill, which can be left blank if not needed.

    Attributes
    ----------
    `id` : int
        The unique identifier for the skill, automatically generated by Django.
    `name` : str
        A character field that specifies the name of the skill.
    """
    SKILLS = ["medic", "translator", "driver", "nurse", "it"]
    name = models.CharField(max_length=50, choices=[(skill, skill) for skill in SKILLS])

    def __str__(self):
        return self.name


class VolunteerInfo(models.Model):
    """ `dris_app.models.VolunteerInfo` is a model that stores additional information
    about a volunteer, including their skills and availability status.

    Parameters
    ----------
    `user` : dris_app.models.User
        The user who is a volunteer, limited to users with the role 'Volunteer'.
    `skills` : dris_app.models.Skill
        A many-to-many relationship to the `Skill` model, allowing a volunteer to have multiple skills.
    `is_available` : bool
        A boolean field indicating whether the volunteer is currently available for assignments.

    Attributes
    ----------
    `id` : int
        The unique identifier for the volunteer info, automatically generated by Django.
    `user` : dris_app.models.User
        Foreign key reference to the user who is a volunteer, limited to users
        with the role 'Volunteer'.
    `skills` : dris_app.models.Skill
        A many-to-many relationship to the `Skill` model, allowing a volunteer to have multiple skills.
    `is_available` : bool
        A boolean field indicating whether the volunteer is currently available for assignments.
    """
    user = models.OneToOneField(User, on_delete=models.CASCADE, limit_choices_to={'role': 'volunteer'})
    skills = models.ManyToManyField(Skill, blank=True)
    is_available = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.user.username}'s Volunteer Info"


class DisasterReport(models.Model):
    """ `dris_app.models.DisasterReport` is a model that represents a report of a disaster
    made by a citizen. It includes details about the disaster, such as the type, location,
    severity, and the citizen who reported it.

    Parameters
    ----------
    `reporter` : dris_app.models.User
        The user who reported the disaster, limited to users with the role 'Citizen'.
    `disaster_type` : str
        The type of disaster being reported, such as 'Flood', 'Landslide', or 'Haze'.
    `gps_coordinates` : str
        The GPS coordinates of the disaster location, stored as a string (e.g., "latitude, longitude").
    `severity` : int
        The severity of the disaster, represented as an integer (e.g., 1 for low
        severity, 5 for high severity).
    `description` : str
        Additional details about the disaster, which can be left blank if not needed.

    Attributes
    ----------
    `id` : int
        The unique identifier for the disaster report, automatically generated by Django.
    `reporter` : dris_app.models.User
        A foreign key reference to the user who reported the disaster, limited to users
        with the role 'Citizen'.
    `disaster_type` : str
        A character field that specifies the type of disaster being reported.
    `gps_coordinates` : str
        A character field that stores the GPS coordinates of the disaster location,
        formatted as a string (e.g., "latitude,longitude").
    `severity` : int
        An integer field that indicates the severity of the disaster, typically on a scale
        from 1 to 5.
    `timestamp` : django.db.models.DateTimeField
        A datetime field that automatically records the time when the disaster report was created.
    """
    reporter = models.ForeignKey(User, on_delete=models.CASCADE, limit_choices_to={'role': 'Citizen'})
    disaster_type = models.CharField(max_length=50)
    gps_coordinates = models.CharField(max_length=100)
    severity = models.IntegerField()
    timestamp = models.DateTimeField(auto_now_add=True)
    description = models.TextField(blank=True)


class AidRequest(models.Model):
    """ `dris_app.models.AidRequest` is a model that represents a request for aid
    made by a citizen in response to a disaster report. It includes details about the
    aid requested, the disaster report it relates to, and the status of the request.

    Parameters
    ----------
    `requester` : dris_app.models.User
        The user who is requesting aid, limited to users with the role 'Citizen'.
    `disaster_report` : dris_app.models.DisasterReport
        The disaster report that this aid request is related to.
    `aid_type` : str
        The type of aid being requested, such as 'Food', 'Shelter', or 'Rescue'.
    `details` : str
        Additional details about the aid request, which can be left blank if not needed.
    `status` : str
        The current status of the aid request, which can be 'Pending', 'In Progress',
        or 'Completed'. Defaults to 'Pending'.

    Attributes
    ----------
    `id` : int
        The unique identifier for the aid request, automatically generated by Django.
    `requester` : dris_app.models.User
        A foreign key reference to the user who is requesting aid, limited to users
        with the role 'Citizen'.
    `disaster_report` : dris_app.models.DisasterReport
        A foreign key reference to the disaster report that this aid request is related to.
    `aid_type` : str
        A character field that specifies the type of aid being requested.
    `details` : str
        A text field that contains additional details about the aid request, which can be left blank.
    `status` : str
        A character field that indicates the current status of the aid request, with choices
        limited to 'Pending', 'In Progress', and 'Completed'. Defaults to 'Pending'.
    `request_time` : django.db.models.DateTimeField
        A datetime field that automatically records the time when the aid request was made.
    `admitted_shelter` : dris_app.models.Shelter
        A foreign key reference to a shelter where the requester has been admitted, if applicable.
    """
    STATUS_CHOICES = [
        ('Pending', 'Pending'),
        ('In Progress', 'In Progress'),
        ('Completed', 'Completed'),
    ]
    requester = models.ForeignKey(User, on_delete=models.CASCADE, limit_choices_to={'role': 'Citizen'})
    disaster_report = models.ForeignKey(DisasterReport, on_delete=models.CASCADE)
    aid_type = models.CharField(max_length=100)
    details = models.TextField(blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')
    request_time = models.DateTimeField(auto_now_add=True)
    admitted_shelter = models.ForeignKey('Shelter', on_delete=models.SET_NULL, null=True, blank=True)


class VolunteerAssignment(models.Model):
    """ `dris_app.models.VolunteerAssignment` is a model that represents an assignment
    of a volunteer to a specific disaster report. It includes details about the volunteer,
    the disaster report they are assigned to, the task description, the time of assignment,
    and the current status of the assignment.

    Parameters
    ----------
    `volunteer` : dris_app.models.User
        The user who is assigned to the task, limited to users with the role 'Volunteer'.
    `aid_request` : dris_app.models.AidRequest
        The aid request that this assignment relates to.
    `task_description` : str
        A description of the task assigned to the volunteer.
    `assignment_time` : django.db.models.DateTimeField
        The time when the assignment was made, automatically set to the current time.
    `status` : str
        The current status of the assignment, which can be 'Assigned', 'In Progress',
        or 'Completed'. Defaults to 'Assigned'.

    Attributes
    ----------
    `id` : int
        The unique identifier for the volunteer assignment, automatically generated by Django.
    `volunteer` : dris_app.models.User
        A foreign key reference to the user who is assigned to the task, limited to users
        with the role 'Volunteer'.
    `aid_request` : dris_app.models.AidRequest
        A foreign key reference to the aid request that this assignment relates to.
    `task_description` : str
        A text field that contains a description of the task assigned to the volunteer.
    `assignment_time` : django.db.models.DateTimeField
        A datetime field that automatically records the time when the assignment was made.
    `status` : str
        A character field that indicates the current status of the assignment, with choices
        limited to 'Assigned', 'In Progress', and 'Completed'. Defaults to 'Assigned'.
    `citizen_confirmed` : bool
        A boolean field indicating whether the citizen has confirmed the assignment, defaulting to False.
    """
    STATUS_CHOICES = [
        ('Assigned', 'Assigned'),
        ('In Progress', 'In Progress'),
        ('Completed', 'Completed')
    ]
    volunteer = models.ForeignKey(User, on_delete=models.CASCADE, limit_choices_to={'role': 'Volunteer'})
    aid_request = models.ForeignKey(AidRequest, on_delete=models.CASCADE)
    task_description = models.TextField()
    assignment_time = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Assigned')
    citizen_confirmed = models.BooleanField(default=False)


class Shelter(models.Model):
    """ `dris_app.models.Shelter` is a model that represents a shelter
    available for disaster response. It includes details about the shelter's
    name, location, capacity, availability, and the authority managing it.

    Parameters
    ----------
    `name` : str
        The name of the shelter.
    `location` : str
        The physical location of the shelter, which can be a street address or a description.
    `capacity` : int
        The maximum number of people the shelter can accommodate.
    `availability` : int
        The current number of available spaces in the shelter.
    `managed_by` : dris_app.models.User
        The user who manages the shelter, limited to users with the role 'Authority'.

    Attributes
    ----------
    `id` : int
        The unique identifier for the shelter, automatically generated by Django.
    `name` : str
        A character field that specifies the name of the shelter.
    `location` : str
        A character field that specifies the location of the shelter.
    `capacity` : int
        An integer field that indicates the maximum capacity of the shelter.
    `availability` : int
        An integer field that indicates the current number of available spaces in the shelter.
    `managed_by` : dris_app.models.User
        A foreign key reference to the user who manages the shelter, limited to users
        with the role 'Authority'.
    """
    name = models.CharField(max_length=100)
    location = models.CharField(max_length=255)
    capacity = models.IntegerField()
    availability = models.IntegerField()
    managed_by = models.ForeignKey(User, on_delete=models.CASCADE, limit_choices_to={'role': 'Authority'})